<div class="container-fluid mt-4"></div>
<h2>User Management</h2>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Avatar</th>
                        <th>Email</th>
                        <th>Full Name</th>
                        <th>Role</th>
                        <th>Premium Status</th>
                        <th>Created At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each users}}
                    <tr>
                        <td>{{this.id}}</td>
                        <td>
                            <img src="/static/img/default.png" class="rounded-circle" width="40">
                        </td>
                        <td>{{this.email}}</td>
                        <td>{{this.full_name}}</td>
                        <td>
                            <select class="form-select form-select-sm role-select" data-user-id="{{this.id}}">
                                <option value="subscriber" {{#if (eq this.role 'subscriber' )}}selected{{/if}}>
                                    subscriber</option>
                                <option value="writer" {{#if (eq this.role 'writer' )}}selected{{/if}}>writer</option>
                                <option value="editor" {{#if (eq this.role 'editor' )}}selected{{/if}}>editor</option>
                                <option value="admin" {{#if (eq this.role 'admin' )}}selected{{/if}}>admin</option>
                            </select>
                        </td>
                        <td>
                            {{#if this.premium_start_date}}
                            <span class="badge bg-success">Premium</span>
                            {{else}}
                            <span class="badge bg-secondary">Free</span>
                            {{/if}}
                        </td>
                        <td>{{formatDate this.created_at}}</td>
                        <td>
                            <button class="btn btn-sm btn-danger" onclick="deleteUser({{this.id}})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Draft Articles Section -->
<h2 class="mt-4">Draft Articles</h2>
<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Article Title</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Reject Reason</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each draftArticles}}
                    <tr>
                        <td>{{this.id}}</td>
                        <td>{{this.title}}</td>
                        <td>{{formatDate this.date}}</td>
                        <td>{{this.status}}</td>
                        <td>{{this.reject_reason}}</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary" onclick="viewDraft({{this.articles_id}})">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-success" onclick="approveDraft({{this.id}})">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="showRejectModal({{this.id}})">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Draft</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rejectForm">
                    <input type="hidden" id="rejectDraftId">
                    <div class="mb-3">
                        <label class="form-label">Reject Reason</label>
                        <textarea class="form-control" id="rejectReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" onclick="rejectDraft()">Reject</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Handle role change
    document.querySelectorAll('.role-select').forEach(select => {
        select.addEventListener('change', async function () {
            const userId = this.dataset.userId;
            const newRole = this.value;
            if (!userId || !newRole) {
                alert('Missing user ID or role');
                return;
            }
            try {
                const response = await fetch(`/admin/users/${userId}/role`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ role: newRole })
                });
                const data = await response.json();
                if (response.ok) {
                    alert(data.message || 'Role updated successfully');
                } else {
                    throw new Error(data.message || 'Failed to update role');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating role');
            }
        });
    });

    // Handle user deletion
    async function deleteUser(userId) {
        if (!confirm('Are you sure you want to delete this user?')) {
            return;
        }

        try {
            const response = await fetch(`/admin/users/${userId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                window.location.reload();
            } else {
                throw new Error('Failed to delete user');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error deleting user');
        }
    }

    // View draft article
    function viewDraft(articleId) {
        window.location.href = `/article/${articleId}`;
    }
    // Approve draft
    async function approveDraft(draftId) {
        if (!confirm('Are you sure you want to approve this draft?')) {
            return;
        }
        try {
            const response = await fetch(`/admin/drafts/${draftId}/approve`, {
                method: 'PUT'
            });
            if (response.ok) {
                alert('Draft approved successfully');
                window.location.reload();
            } else {
                const error = await response.json();
                throw new Error(error.message || 'Failed to approve draft');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error approving draft');
        }
    }
    // Show reject modal
    function showRejectModal(draftId) {
        document.getElementById('rejectDraftId').value = draftId;
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
    }
    // Reject draft
    async function rejectDraft() {
        const draftId = document.getElementById('rejectDraftId').value;
        const reason = document.getElementById('rejectReason').value;
        if (!reason.trim()) {
            alert('Please provide a reject reason');
            return;
        }
        try {
            const response = await fetch(`/admin/drafts/${draftId}/reject`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason })
            });
            if (response.ok) {
                alert('Draft rejected successfully');
                const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
                modal.hide();
                window.location.reload();
            } else {
                const error = await response.json();
                throw new Error(error.message || 'Failed to reject draft');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error rejecting draft');
        }
    }
</script>
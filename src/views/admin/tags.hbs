<div class="container mt-4"></div>
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Tags Management</h2>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTagModal">
        <i class="fas fa-plus"></i> Add Tag
    </button>
</div>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Created At</th>
            <th>Updated At</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        {{#each tags}}
        <tr>
            <td>{{this.id}}</td>
            <td>{{this.name}}</td>
            <td>{{this.created_at}}</td>
            <td>{{this.updated_at}}</td>
            <td>
                <button class="btn btn-sm btn-warning" onclick="editTag({{this.id}})">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteTag({{this.id}})">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>
        {{/each}}
    </tbody>
</table>
</div>
<!-- Add Tag Modal -->
<div class="modal fade" id="addTagModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Tag</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form action="/admin/tags" method="POST" class="needs-validation" novalidate>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Tag Name</label>
                        <input type="text" class="form-control" name="name" required>
                        <div class="invalid-feedback">
                            Please enter a tag name
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Tag</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Edit Tag Modal -->
<div class="modal fade" id="editTagModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Tag</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editTagForm" class="needs-validation" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="editTagId">
                    <div class="mb-3">
                        <label class="form-label">Tag Name</label>
                        <input type="text" class="form-control" id="editTagName" required>
                        <div class="invalid-feedback">
                            Please enter a tag name
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Update Tag</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    async function editTag(id) {
        try {
            const response = await fetch(`/admin/tags/${id}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const tag = await response.json();
            document.getElementById('editTagId').value = tag.id;
            document.getElementById('editTagName').value = tag.name;
            const editModal = new bootstrap.Modal(document.getElementById('editTagModal'));
            editModal.show();
        } catch (error) {
            console.error('Error fetching tag:', error);
            alert('Error loading tag data');
        }
    }
    document.getElementById('editTagForm').onsubmit = async (e) => {
        e.preventDefault();
        const id = document.getElementById('editTagId').value;
        const formData = {
            name: document.getElementById('editTagName').value
        };
        try {
            const response = await fetch(`/admin/tags/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            if (response.ok) {
                window.location.reload();
            } else {
                throw new Error('Failed to update tag');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error updating tag');
        }
    };
    async function deleteTag(id) {
        if (confirm('Are you sure you want to delete this tag?')) {
            try {
                const response = await fetch(`/admin/tags/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                if (response.ok) {
                    window.location.reload();
                } else {
                    throw new Error('Failed to delete tag');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting tag');
            }
        }
    }
    // Form validation - Sửa lại phần này
    (function () {
        'use strict'
        const forms = document.querySelectorAll('.needs-validation')
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }
                form.classList.add('was-validated')
            }, false)
        })
    })();

</script>